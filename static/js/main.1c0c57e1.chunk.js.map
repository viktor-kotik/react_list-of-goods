{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","isReversed","sortBy","this","visibleGoods","sort","good1","good2","length","reverse","className","onClick","setState","type","classNames","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kQAKMA,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAQWC,EAAb,4MACEC,MAAQ,CACNC,YAAY,EACZC,OAAQ,GAHZ,4CAME,WAAU,IAAD,OACCD,EAAeE,KAAKH,MAApBC,WACFG,EAAY,UAAON,GAqCzB,OAd0B,IAAtBK,KAAKH,MAAME,QACbE,EAAaC,OAGW,IAAtBF,KAAKH,MAAME,QACbE,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAOD,EAAME,OAASD,EAAMC,UAI5BP,GACFG,EAAaK,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,WAhCf,EAAKC,SAAS,CAAEV,OAAQ,KAmClBW,KAAK,SACLH,UAAWI,IACT,iBACA,CACE,0BAAiD,IAAtBX,KAAKH,MAAME,SAR5C,iCAeA,wBACES,QAAS,WA3Cf,EAAKC,SAAS,CAAEV,OAAQ,KA8ClBW,KAAK,SACLH,UAAWI,IACT,oBACA,CACE,6BAAoD,IAAtBX,KAAKH,MAAME,SAR/C,4BAeA,wBACES,QAAS,WApEf,EAAKC,UAAS,SAAAZ,GAAK,MAAK,CACtBC,YAAaD,EAAMC,gBAsEfY,KAAK,SACLH,UAAWI,IACT,oBACA,CACE,8BAAwD,IAA1BX,KAAKH,MAAMC,aAR/C,qBAgBGE,KAAKH,MAAME,OAAS,IAA+B,IAA1BC,KAAKH,MAAMC,WAEjC,wBACEU,QAAS,WAxErB,EAAKC,SAAS,CACZX,YAAY,EACZC,OAAQ,KAyEEW,KAAK,SACLH,UAAU,4BALZ,mBAUC,MAIT,6BACGN,EAAaW,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAAoBA,gBA/GxD,GAAyBC,IAAMC,WCpB/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1c0c57e1.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  isReversed: boolean,\n  sortBy: number\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortBy: 0,\n  };\n\n  render() {\n    const { isReversed } = this.state;\n    const visibleGoods = [...goodsFromServer];\n\n    const reverse = () => {\n      this.setState(state => ({\n        isReversed: !state.isReversed,\n      }));\n    };\n\n    const sortedAlphabetically = () => {\n      this.setState({ sortBy: 1 });\n    };\n\n    const sortedLength = () => {\n      this.setState({ sortBy: 2 });\n    };\n\n    const reset = () => {\n      this.setState({\n        isReversed: false,\n        sortBy: 0,\n      });\n    };\n\n    if (this.state.sortBy === 1) {\n      visibleGoods.sort();\n    }\n\n    if (this.state.sortBy === 2) {\n      visibleGoods.sort((good1, good2) => {\n        return good1.length - good2.length;\n      });\n    }\n\n    if (isReversed) {\n      visibleGoods.reverse();\n    }\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            onClick={() => {\n              sortedAlphabetically();\n            }}\n            type=\"button\"\n            className={classNames(\n              'button is-info',\n              {\n                'button is-info is-light': this.state.sortBy === 1,\n              },\n            )}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            onClick={() => {\n              sortedLength();\n            }}\n            type=\"button\"\n            className={classNames(\n              'button is-success',\n              {\n                'button is-success is-light': this.state.sortBy === 1,\n              },\n            )}\n          >\n            Sort by length\n          </button>\n\n          <button\n            onClick={() => {\n              reverse();\n            }}\n            type=\"button\"\n            className={classNames(\n              'button is-warning',\n              {\n                'button is-warning is-light': this.state.isReversed === true,\n              },\n            )}\n          >\n            Reverse\n          </button>\n\n          {\n            (this.state.sortBy > 0 || this.state.isReversed === true)\n              ? (\n                <button\n                  onClick={() => {\n                    reset();\n                  }}\n                  type=\"button\"\n                  className=\"button is-danger is-light\"\n                >\n                  Reset\n                </button>\n              )\n              : ('')\n          }\n        </div>\n\n        <ul>\n          {visibleGoods.map(good => <li data-cy=\"Good\">{good}</li>)}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}